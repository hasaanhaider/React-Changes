{"ast":null,"code":"var _jsxFileName = \"/home/hasaan/Documents/Reactjs/meme_generator/src/components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Memedata from './Memedata';\nimport Ispass from './Ispass';\nimport boxdata from './boxdata';\nimport Box from './Box'; // impot Box\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Meme = () => {\n  _s();\n\n  const [meme, setMeme] = useState({\n    topText: '',\n    buttomText: '',\n    randomImage: 'https://i.imgflip.com/1bik.jpg'\n  });\n  const [memeImage, setMemeImage] = useState(Memedata);\n\n  const GetRandomeArray = e => {\n    e.preventDefault();\n    const memeArray = memeImage.data.memes;\n    const randomeNumber = Math.floor(Math.random() * memeArray.length); // setUrl(memeArray[randomeNumber].url);\n\n    const url = memeArray[randomeNumber].url; // console.log(url);\n\n    setMeme(meme => ({ ...meme,\n      randomImage: url\n    }));\n  }; // hooks handling using array\n  // const [thingsArray, setThingsArray] =  useState(['Thing1, Thing 2']);\n  // const HandleArray = (e) => {\n  //     e.preventDefault();\n  //     setThingsArray(thingsArray =>{ \n  //         return [...thingsArray, `Things${thingsArray.length +1}`]})\n  //     console.log(thingsArray);\n  // }\n  // const ThingsElements = thingsArray.map(thing => <p key={thing}>{thing}</p>)\n  // object toggle state function using object\n  //     const [toggle, setToggle] = useState({\n  //         name:'Hasaan',\n  //         fName:'Basharat Ali',\n  //         isPass:false\n  //     })\n  //     const handleIsPass = () => {\n  //         setToggle(toggle => ({ ...toggle,isPass: !toggle.isPass\n  // }))\n  //     }\n  // updating state changing color\n\n\n  const [box, setBox] = useState(boxdata); // toggle function with for loop\n  // const toggle = (id) => {\n  //     // console.log(id);\n  //     setBox(box => {\n  //         const newBox = [];\n  //         for (let index = 0; index < box.length; index++) {\n  //             const element = box[index];\n  //             if(element.id == id)\n  //             {\n  //                 const updateBox = {...element, on: !element.on}\n  //                 newBox.push(updateBox);\n  //             }\n  //             else{ newBox.push(element);}\n  //         }\n  //         return newBox;\n  //     })\n  // }\n  // toggle function with map method\n  // const toggle = (id) => {\n  //     setBox(box => {\n  //         return box.map((item) => {\n  //             return item.id == id ? { ...item, on: !item.on } : item\n  //         })\n  //     })\n  // }\n  // const colorDiv = box.map(item => (\n  //     <Box key={item.id} toggle={toggle} id={item.id} on={item.on} />\n  // ))\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 mt-5 \",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: HnadleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3 mx-5 col-5\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"Top Text\",\n                  name: \"topText\",\n                  onChange: HandleChange,\n                  value: meme.topText,\n                  type: \"text\",\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3  second-input col-5\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"Buttom Text\",\n                  name: \"buttomText\",\n                  onChange: HandleChange,\n                  value: meme.buttomText,\n                  type: \"text\",\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: GetRandomeArray,\n              className: \"w-100 form-btn\",\n              type: \"submit\",\n              children: \"Get A New Image \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meme-image mx-auto mt-5\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: meme.randomImage,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Meme, \"oO00iQYS4ZuBJKgxD+20p6FCXmA=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","Memedata","Ispass","boxdata","Box","Meme","meme","setMeme","topText","buttomText","randomImage","memeImage","setMemeImage","GetRandomeArray","e","preventDefault","memeArray","data","memes","randomeNumber","Math","floor","random","length","url","box","setBox","HnadleSubmit","HandleChange"],"sources":["/home/hasaan/Documents/Reactjs/meme_generator/src/components/Meme.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Memedata from './Memedata'\nimport Ispass from './Ispass'\nimport boxdata from './boxdata'\nimport Box from './Box'\n// impot Box\n\nconst Meme = () => {\n\n    const [meme, setMeme] = useState({\n        topText: '',\n        buttomText: '',\n        randomImage: 'https://i.imgflip.com/1bik.jpg'\n    })\n\n    const [memeImage, setMemeImage] = useState(Memedata);\n    const GetRandomeArray = (e) => {\n        e.preventDefault();\n        const memeArray = memeImage.data.memes;\n        const randomeNumber = Math.floor(Math.random() * memeArray.length)\n        // setUrl(memeArray[randomeNumber].url);\n        const url = memeArray[randomeNumber].url\n        // console.log(url);\n\n        setMeme(meme => ({\n            ...meme,\n            randomImage: url\n        }))\n    }\n\n    // hooks handling using array\n\n    // const [thingsArray, setThingsArray] =  useState(['Thing1, Thing 2']);\n\n    // const HandleArray = (e) => {\n    //     e.preventDefault();\n    //     setThingsArray(thingsArray =>{ \n    //         return [...thingsArray, `Things${thingsArray.length +1}`]})\n    //     console.log(thingsArray);\n    // }\n\n    // const ThingsElements = thingsArray.map(thing => <p key={thing}>{thing}</p>)\n\n\n\n    // object toggle state function using object\n    //     const [toggle, setToggle] = useState({\n    //         name:'Hasaan',\n    //         fName:'Basharat Ali',\n    //         isPass:false\n    //     })\n    //     const handleIsPass = () => {\n    //         setToggle(toggle => ({ ...toggle,isPass: !toggle.isPass\n    // }))\n    //     }\n\n\n    // updating state changing color\n\n\n    const [box, setBox] = useState(boxdata)\n\n    // toggle function with for loop\n    // const toggle = (id) => {\n    //     // console.log(id);\n    //     setBox(box => {\n    //         const newBox = [];\n    //         for (let index = 0; index < box.length; index++) {\n    //             const element = box[index];\n    //             if(element.id == id)\n    //             {\n    //                 const updateBox = {...element, on: !element.on}\n    //                 newBox.push(updateBox);\n    //             }\n    //             else{ newBox.push(element);}\n\n    //         }\n    //         return newBox;\n    //     })\n    // }\n\n\n    // toggle function with map method\n\n    // const toggle = (id) => {\n    //     setBox(box => {\n    //         return box.map((item) => {\n    //             return item.id == id ? { ...item, on: !item.on } : item\n    //         })\n    //     })\n    // }\n    // const colorDiv = box.map(item => (\n    //     <Box key={item.id} toggle={toggle} id={item.id} on={item.on} />\n    // ))\n\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 mt-5 \">\n                        {/* {ThingsElements} */}\n\n                        <form onSubmit={HnadleSubmit}>\n\n\n                            <div className=\"d-flex\">\n                                <div className=\"mb-3 mx-5 col-5\">\n                                    <input\n                                        placeholder='Top Text' \n                                        name='topText'\n                                        onChange={HandleChange}\n                                        value={meme.topText}\n                                        type=\"text\"\n                                        className=\"form-control\" />\n\n                                </div>\n                                <div className=\"mb-3  second-input col-5\">\n                                    <input\n                                        placeholder='Buttom Text'\n                                        name='buttomText'\n                                        onChange={HandleChange}\n                                        value={meme.buttomText}\n                                        type=\"text\"\n                                        className=\"form-control\" />\n                                </div><br />\n                            </div>\n                            <button onClick={GetRandomeArray} className='w-100 form-btn' type=\"submit\">Get A New Image </button>\n                        </form>\n                        <div className='meme-image mx-auto mt-5'>\n                            <img src={meme.randomImage} alt=\"\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* <button onClick={HandleArray}>HandleArray</button> */}\n            {/* <div>\n                <h1>Name :{toggle.name}</h1>\n                <h2>Father Name :{toggle.fName}</h2>\n                <h5 onClick={handleIsPass}>Result:{checkPass}</h5>\n                <Ispass toggle={toggle} handleisPass={handleIsPass}/>\n            </div> */}\n\n            {/* {colorDiv} */}\n\n        </div>\n    )\n}\n\nexport default Meme"],"mappings":"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"},"metadata":{},"sourceType":"module"}