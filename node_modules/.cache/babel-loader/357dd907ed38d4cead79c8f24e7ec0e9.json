{"ast":null,"code":"var _jsxFileName = \"/home/hasaan/Documents/Reactjs/meme_generator/src/components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Memedata from './Memedata';\nimport Ispass from './Ispass';\nimport boxdata from './boxdata';\nimport Box from './Box'; // impot Box\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Meme = () => {\n  _s();\n\n  const [meme, setMeme] = useState({\n    topText: '',\n    buttomText: '',\n    randomImage: 'https://i.imgflip.com/1bik.jpg'\n  });\n  const [memeImage, setMemeImage] = useState(Memedata);\n\n  const GetRandomeArray = e => {\n    e.preventDefault();\n    const memeArray = memeImage.data.memes;\n    const randomeNumber = Math.floor(Math.random() * memeArray.length); // setUrl(memeArray[randomeNumber].url);\n\n    const url = memeArray[randomeNumber].url; // console.log(url);\n\n    setMeme(meme => ({ ...meme,\n      randomImage: url\n    }));\n  }; // hooks handling using array\n  // const [thingsArray, setThingsArray] =  useState(['Thing1, Thing 2']);\n  // const HandleArray = (e) => {\n  //     e.preventDefault();\n  //     setThingsArray(thingsArray =>{ \n  //         return [...thingsArray, `Things${thingsArray.length +1}`]})\n  //     console.log(thingsArray);\n  // }\n  // const ThingsElements = thingsArray.map(thing => <p key={thing}>{thing}</p>)\n  // object toggle state function using object\n  //     const [toggle, setToggle] = useState({\n  //         name:'Hasaan',\n  //         fName:'Basharat Ali',\n  //         isPass:false\n  //     })\n  //     const handleIsPass = () => {\n  //         setToggle(toggle => ({ ...toggle,isPass: !toggle.isPass\n  // }))\n  //     }\n  // updating state changing color\n\n\n  const [box, setBox] = useState(boxdata);\n\n  const toggle = id => {\n    // console.log(id);\n    setBox(preBox => {\n      const newBox = [];\n\n      for (let index = 0; index < preBox.length; index++) {\n        const element = preBox[index];\n\n        if (element.id == id) {\n          const updateBox = { ...element,\n            on: !preBox.on\n          };\n          newBox.push(updateBox);\n        } else {\n          newBox.push(element);\n        }\n      }\n\n      return newBox;\n    });\n  };\n\n  const colorDiv = box.map(item => /*#__PURE__*/_jsxDEV(Box, {\n    toggle: toggle,\n    id: item.id,\n    on: item.on\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 mt-5 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), colorDiv]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Meme, \"0oStIKhy5y/JJ/G7ae2nm4DU/vY=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","Memedata","Ispass","boxdata","Box","Meme","meme","setMeme","topText","buttomText","randomImage","memeImage","setMemeImage","GetRandomeArray","e","preventDefault","memeArray","data","memes","randomeNumber","Math","floor","random","length","url","box","setBox","toggle","id","preBox","newBox","index","element","updateBox","on","push","colorDiv","map","item"],"sources":["/home/hasaan/Documents/Reactjs/meme_generator/src/components/Meme.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Memedata from './Memedata'\nimport Ispass from './Ispass'\nimport boxdata from './boxdata'\nimport Box from './Box'\n// impot Box\n\nconst Meme = () => {\n\n    const [meme, setMeme] = useState({\n        topText:'',\n        buttomText:'',\n        randomImage:'https://i.imgflip.com/1bik.jpg'\n    })\n\n    const [memeImage, setMemeImage] = useState(Memedata);\n    const GetRandomeArray = (e) => {\n        e.preventDefault();\n        const memeArray = memeImage.data.memes;\n        const randomeNumber = Math.floor(Math.random() * memeArray.length)\n        // setUrl(memeArray[randomeNumber].url);\n        const url = memeArray[randomeNumber].url\n        // console.log(url);\n\n        setMeme(meme => ({\n            ...meme,\n            randomImage:url\n        }))\n    }\n\n    // hooks handling using array\n\n    // const [thingsArray, setThingsArray] =  useState(['Thing1, Thing 2']);\n\n    // const HandleArray = (e) => {\n    //     e.preventDefault();\n    //     setThingsArray(thingsArray =>{ \n    //         return [...thingsArray, `Things${thingsArray.length +1}`]})\n    //     console.log(thingsArray);\n    // }\n\n    // const ThingsElements = thingsArray.map(thing => <p key={thing}>{thing}</p>)\n\n\n\n    // object toggle state function using object\n//     const [toggle, setToggle] = useState({\n//         name:'Hasaan',\n//         fName:'Basharat Ali',\n//         isPass:false\n//     })\n//     const handleIsPass = () => {\n//         setToggle(toggle => ({ ...toggle,isPass: !toggle.isPass\n// }))\n//     }\n\n\n// updating state changing color\n\n\nconst [box, setBox] = useState(boxdata)\n\nconst toggle = (id) => {\n    // console.log(id);\n    setBox(preBox => {\n        const newBox = [];\n        for (let index = 0; index < preBox.length; index++) {\n            const element = preBox[index];\n            if(element.id == id)\n            {\n                const updateBox = {\n                    ...element,\n                    on: !preBox.on\n                }\n                newBox.push(updateBox);\n            }\n            else{\n                newBox.push(element);\n            }\n            \n        }\n        return newBox;\n    })\n}\nconst colorDiv = box.map(item => (\n    <Box key={item.id} toggle={toggle} id={item.id} on={item.on} />\n))\n\n\n    return (\n        <div>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 mt-5 \">\n                        {/* {ThingsElements} */}\n\n                        {/* <form className=''>\n\n\n                            <div className=\"d-flex\">\n                                <div className=\"mb-3 mx-5 col-5\">\n                                    <input placeholder='Top Text' type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\n\n                                </div>\n                                <div className=\"mb-3  second-input col-5\">\n                                    <input placeholder='Buttom Text' type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" />\n                                </div><br />\n                            </div>\n                            <button onClick={GetRandomeArray} className='w-100 form-btn' type=\"submit\">Get A New Image </button>\n                        </form>\n                        <div className='meme-image mx-auto mt-5'>\n                            <img src={meme.randomImage} alt=\"\" />\n                        </div> */}\n                    </div>\n                </div>\n            </div>\n            {/* <button onClick={HandleArray}>HandleArray</button> */}\n            {/* <div>\n                <h1>Name :{toggle.name}</h1>\n                <h2>Father Name :{toggle.fName}</h2>\n                <h5 onClick={handleIsPass}>Result:{checkPass}</h5>\n                <Ispass toggle={toggle} handleisPass={handleIsPass}/>\n            </div> */}\n\n            {colorDiv}\n\n        </div>\n    )\n}\n\nexport default Meme"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EAEf,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;IAC7BQ,OAAO,EAAC,EADqB;IAE7BC,UAAU,EAAC,EAFkB;IAG7BC,WAAW,EAAC;EAHiB,CAAD,CAAhC;EAMA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACC,QAAD,CAA1C;;EACA,MAAMY,eAAe,GAAIC,CAAD,IAAO;IAC3BA,CAAC,CAACC,cAAF;IACA,MAAMC,SAAS,GAAGL,SAAS,CAACM,IAAV,CAAeC,KAAjC;IACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,SAAS,CAACO,MAArC,CAAtB,CAH2B,CAI3B;;IACA,MAAMC,GAAG,GAAGR,SAAS,CAACG,aAAD,CAAT,CAAyBK,GAArC,CAL2B,CAM3B;;IAEAjB,OAAO,CAACD,IAAI,KAAK,EACb,GAAGA,IADU;MAEbI,WAAW,EAACc;IAFC,CAAL,CAAL,CAAP;EAIH,CAZD,CATe,CAuBf;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EAIA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;;;EAGA,MAAM,CAACC,GAAD,EAAMC,MAAN,IAAgB1B,QAAQ,CAACG,OAAD,CAA9B;;EAEA,MAAMwB,MAAM,GAAIC,EAAD,IAAQ;IACnB;IACAF,MAAM,CAACG,MAAM,IAAI;MACb,MAAMC,MAAM,GAAG,EAAf;;MACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,MAAM,CAACN,MAAnC,EAA2CQ,KAAK,EAAhD,EAAoD;QAChD,MAAMC,OAAO,GAAGH,MAAM,CAACE,KAAD,CAAtB;;QACA,IAAGC,OAAO,CAACJ,EAAR,IAAcA,EAAjB,EACA;UACI,MAAMK,SAAS,GAAG,EACd,GAAGD,OADW;YAEdE,EAAE,EAAE,CAACL,MAAM,CAACK;UAFE,CAAlB;UAIAJ,MAAM,CAACK,IAAP,CAAYF,SAAZ;QACH,CAPD,MAQI;UACAH,MAAM,CAACK,IAAP,CAAYH,OAAZ;QACH;MAEJ;;MACD,OAAOF,MAAP;IACH,CAlBK,CAAN;EAmBH,CArBD;;EAsBA,MAAMM,QAAQ,GAAGX,GAAG,CAACY,GAAJ,CAAQC,IAAI,iBACzB,QAAC,GAAD;IAAmB,MAAM,EAAEX,MAA3B;IAAmC,EAAE,EAAEW,IAAI,CAACV,EAA5C;IAAgD,EAAE,EAAEU,IAAI,CAACJ;EAAzD,GAAUI,IAAI,CAACV,EAAf;IAAA;IAAA;IAAA;EAAA,QADa,CAAjB;EAKI,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,WAAf;MAAA,uBACI;QAAK,SAAS,EAAC,KAAf;QAAA,uBACI;UAAK,SAAS,EAAC;QAAf;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,EAkCKQ,QAlCL;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuCH,CAzHD;;GAAM/B,I;;KAAAA,I;AA2HN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}